import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import cookie from "cookie";
import { useEffect, useState } from "react";

function getTokenFromCookie(cookies?: string): string {
  if (cookies) {
    const parsed = cookie.parse(cookies);
    const authCookie = parsed.token;
    if (authCookie) {
      return JSON.parse(authCookie);
    }
  }
  return "";
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const token = getTokenFromCookie(ctx.req.headers.cookie);
  return {
    props: {
      token,
    },
  };
};

interface Props {
  token: string;
}

const Home: NextPage<Props> = ({ token }) => {
  const [user, setUser] = useState<User>();
  console.log("token", token);

  async function getServerFromUser(): Promise<Server | null> {
    if (token) {
      let discord_servers: [Server] = await fetch(
        `https://discordapp.com/api/users/@me/guilds`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      ).then((r) => r.json());

      if (discord_servers.length) {
        let id_warena_server = "882812746478018584";
        const discord_warena_server = discord_servers.find(
          (item: any) => item.id == id_warena_server
        );
        if (discord_warena_server) return discord_warena_server;
      }
      return null;
    }
    return null;
  }

  async function getUserFromToken() {
    setUser(undefined);
    if (token) {
      let discord_user: User = await fetch(
        `https://discordapp.com/api/users/@me`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      ).then((r) => r.json());

      discord_user.server = await getServerFromUser();

      setUser(discord_user);
    }
  }

  useEffect(() => {
    getUserFromToken();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {token ? (
          <>
            <p>access_token: {token}</p>
            <a href="/auth/logout">Clear Token</a>
          </>
        ) : (
          <>
            <a href="/auth/login">Get Token</a>
          </>
        )}
        <br />

        <div
          style={{
            border: "1px solid gray",
            height: 300,
            width: 500,
            textAlign: "center",
          }}
        >
          {user ? (
            <>
              <p>id: {user.id}</p>
              <p>username: {user.username}</p>
              <p>avatar: {user.avatar}</p>
              <p>email: {user.email}</p>
              <p>
                warena server:{" "}
                {user.server ? (
                  `Connected Successfully To ${user.server.name} Server`
                ) : (
                  <>
                    <a
                      className="font-bold"
                      target="_blank"
                      rel="noreferrer"
                      href="https://discord.gg/warenaofficial"
                    >
                      Join The Warena Server
                    </a>
                    &nbsp;&nbsp;&nbsp;
                    <button onClick={getUserFromToken}> retry</button>
                  </>
                )}
              </p>
            </>
          ) : (
            <>Loading...</>
          )}
        </div>
      </main>
    </div>
  );
};

export default Home;
